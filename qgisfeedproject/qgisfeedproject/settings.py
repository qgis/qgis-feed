"""
Django settings for qgisfeedproject project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import logging
import os

logger = logging.getLogger(__name__)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SITE_ROOT = os.path.dirname(os.path.realpath(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "w*x1d0%17@hd6lx8gq#45#8w(w&a-!vupt41%#^ryyxs3l%hz9"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [os.environ.get("QGIS_FEED_PROD_URL", "")]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    # QGIS Feed applications
    "qgisfeed",
    # Dependencies
    "tinymce",  # HTML field
    "imagekit",  # Image crop and resize
    # User visit
    "user_visit",
    # Webpack
    "webpack_loader",
]

# Useful debugging extensions
if DEBUG:
    INSTALLED_APPS += [
        "django_extensions",
    ]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "qgisfeed.middleware.QgisFeedUserVisitMiddleware",
]

ROOT_URLCONF = "qgisfeedproject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "templates.context_processors.settings_var",
            ],
        },
    },
]

WSGI_APPLICATION = "qgisfeedproject.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.getenv("QGISFEED_DOCKER_DBNAME", "qgisfeed"),
        "USER": os.getenv("QGISFEED_DOCKER_DBUSER", "docker"),
        "PASSWORD": os.getenv("QGISFEED_DOCKER_DBPASSWORD", "docker"),
        "HOST": os.getenv("QGISFEED_DOCKER_DBHOST", "postgis"),
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

GEOIP_PATH = "/var/opt/maxmind/"

# This can be specified in settings_local
MAIN_WEBSITE_URL = "https://qgis.org"

DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", "noreply")
EMAIL_BACKEND = os.environ.get(
    "EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend"
)
EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = os.environ.get("EMAIL_PORT", 587)
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", True)
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "noreply")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")

try:
    from .settings_local import *
except ImportError:
    pass

LOGIN_REDIRECT_URL = "/manage"
LOGOUT_REDIRECT_URL = "/"


# Webpack
WEBPACK_LOADER = {
    "DEFAULT": {
        "BUNDLE_DIR_NAME": "bundles",
        "STATS_FILE": os.path.join(os.path.dirname(BASE_DIR), "webpack-stats.json"),
    }
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "class": "logging.FileHandler",
            "filename": "django.log",
        },
    },
}

# Sentry
SENTRY_DSN = os.environ.get("SENTRY_DSN", "")
SENTRY_RATE = os.environ.get("SENTRY_RATE", 1.0)

if SENTRY_DSN and SENTRY_DSN != "":
    import sentry_sdk

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        traces_sample_rate=SENTRY_RATE,
    )

# Mastodon
MASTODON_ACCESS_TOKEN = os.environ.get("MASTODON_ACCESS_TOKEN", "")
MASTODON_API_BASE_URL = os.environ.get(
    "MASTODON_API_BASE_URL", "https://mastodon.social"
)

# Bluesky
BLUESKY_HANDLE = os.environ.get("BLUESKY_HANDLE", "")
BLUESKY_PASSWORD = os.environ.get("BLUESKY_PASSWORD", "")

# Telegram
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID", "")

# Local settings overrides
# Must be the last!
DJANGO_LOCAL_SETTINGS = os.environ.get(
    "DJANGO_LOCAL_SETTINGS", "settings_local_override.py"
)

try:
    from pathlib import Path

    local_settings_path = Path(__file__).parent / DJANGO_LOCAL_SETTINGS
    if local_settings_path.exists():
        import importlib.util

        spec = importlib.util.spec_from_file_location(
            "settings_local_override", local_settings_path
        )
        settings_local_override = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(settings_local_override)
        for setting in dir(settings_local_override):
            if setting.isupper():
                globals()[setting] = getattr(settings_local_override, setting)
    else:
        raise ImportError(
            f"Local settings file {DJANGO_LOCAL_SETTINGS} does not exist."
        )
except ImportError:
    pass
